precision highp float;
using namespace std;
#import <utils>
#import <SparkVAT.sca>
#import <PBR.sca>

// Entry point of the shader code asset
//
// @param[default=#FFFFFFFF] u_baseColor
// @param[default=0.0,min=0.0,max=1.0] u_occlusion
// @param[default=0.0,min=0.0,max=1.0] u_metallic
// @param[default=0.0,min=0.0,max=1.0] u_perceptualRoughness
// @param[default=0.0,min=0.0,max=1.0] u_occlusionStrength
// @param[default=0.0,min=0.0,max=1.0] u_normalMapScale
// @return color
void main(
            optional<std::Texture2d> positionHigh,
            optional<std::Texture2d> positionLow,
            optional<std::Texture2d> normalHigh,
            optional<std::Texture2d> normalLow,
            optional<Texture2d> baseColorTexture,
            optional<Texture2d> metallicRoughnessTexture,
            optional<Texture2d> occlusionTexture,
            optional<Texture2d> combinedOrmTexture,
            optional<Texture2d> emissiveTexture,
            optional<Texture2d> normalMapTexture,
            optional<TextureEnv> diffuseEnvironmentTexture,
            optional<TextureEnv> specularEnvironmentTexture,
            optional<Texture2d> ggxLookup,
            vec4 u_baseColor,
            float u_occlusion,
            float u_metallic,
            float u_perceptualRoughness,
            float u_occlusionStrength,
            float u_normalMapScale,
            float frame,
            float scaleFactor,
            out vec4 Color,
            out vec4 Position)
{
  // Attributes
  frame = mod(getTime() * 0.5,1.0);

  vec3 VATvertexNormal = VATgetVertexNormal(normalHigh, normalLow, frame);
  // mat3 tangentFrame = VATgetTangentFrame(normalHigh, normalLow, frame);
  // vec2 calculatedNormal = calculateNormal(normalTex, tangentFrame, normalScale, normalTile);

  Color = PBRColor( baseColorTexture,
                    metallicRoughnessTexture,
                    occlusionTexture,
                    combinedOrmTexture,
                    emissiveTexture,
                    normalMapTexture,
                    diffuseEnvironmentTexture,
                    specularEnvironmentTexture,
                    ggxLookup,
                    u_baseColor,
                    u_occlusion,
                    u_metallic,
                    u_perceptualRoughness,
                    u_occlusionStrength,
                    u_normalMapScale,
                    VATvertexNormal);

  Position = VATposition(positionHigh, positionLow, frame, scaleFactor);
}
